{"name":"Simplebayes","tagline":"A memory-based, optional-persistence naïve bayesian text classifier.","body":"simplebayes\r\n===========\r\nA memory-based, optional-persistence naïve bayesian text classifier.\r\n--------------------------------------------------------------------\r\n[![Build Status](https://travis-ci.org/hickeroar/simplebayes.svg?branch=master)](https://travis-ci.org/hickeroar/simplebayes)\r\n[![Build Status](https://img.shields.io/badge/coverage-100%-brightgreen.svg?style=flat)](https://travis-ci.org/hickeroar/simplebayes)\r\n[![Build Status](https://img.shields.io/badge/pylint-10.00/10-brightgreen.svg?style=flat)](https://travis-ci.org/hickeroar/simplebayes)\r\n[![Build Status](https://img.shields.io/badge/flake8-passing-brightgreen.svg?style=flat)](https://travis-ci.org/hickeroar/simplebayes)\r\n```\r\nThis work is heavily inspired by the python \"redisbayes\" module found here:\r\n[https://github.com/jart/redisbayes] and [https://pypi.python.org/pypi/redisbayes]\r\n\r\nI've elected to write this to alleviate the network/time requirements when\r\nusing the bayesian classifier to classify large sets of text, or when\r\nattempting to train with very large sets of sample data.\r\n```\r\n\r\nInstallation\r\n------------\r\n```bash\r\nsudo pip install simplebayes\r\n```\r\n\r\nBasic Usage\r\n-----------\r\n```python\r\nimport simplebayes\r\nbayes = simplebayes.SimpleBayes()\r\n\r\nbayes.train('good', 'sunshine drugs love sex lobster sloth')\r\nbayes.train('bad', 'fear death horror government zombie')\r\n\r\nassert bayes.classify('sloths are so cute i love them') == 'good'\r\nassert bayes.classify('i would fear a zombie and love the government') == 'bad'\r\n\r\nprint bayes.score('i fear zombies and love the government')\r\n```\r\n\r\nCache Usage\r\n-----------\r\n```python\r\nimport simplebayes\r\nbayes = simplebayes.SimpleBayes(cache_path='/my/cache/')\r\n# Cache file is '/my/cache/_simplebayes.pickle'\r\n# Default cache_path is '/tmp/'\r\n\r\nif not bayes.cache_train():\r\n    # Unable to load cache data, so we're training it\r\n    bayes.train('good', 'sunshine drugs love sex lobster sloth')\r\n    bayes.train('bad', 'fear death horror government zombie')\r\n\r\n    # Saving the cache so next time the training won't be needed\r\n    bayes.persist_cache()\r\n```\r\n\r\nTokenizer Override\r\n------------------\r\n```python\r\nimport simplebayes\r\n\r\ndef my_tokenizer(sample):\r\n    return sample.split()\r\n\r\nbayes = simplebayes.SimpleBayes(tokenizer=my_tokenizer)\r\n```\r\n\r\n\r\nLicense\r\n-------\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Ryan Vennell\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}